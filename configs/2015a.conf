@low net_namespace low
@high net_namespace high

$IF4=ens4
$IF5=ens5
@low $IF4=eth6
@high $IF4=eth6
@low $IF5=eth7
@high $IF5=eth7

global_defs
{
	router_id router
	enable_script_security
	script_user root
	dynamic_interfaces
#	vrrp_notify_fifo /tmp/notify.fifo
#	vrrp_notify_fifo /tmp/notify.${_INSTANCE}.fifo
#	vrrp_notify_fifo_script /tmp/notify-fifo.sh
	notify_fifo /tmp/notify.${_INSTANCE}.fifo
	notify_fifo_script /tmp/notify-fifo.sh
fifo_write_vrrp_states_on_reload
#	reload_time_file /tmp/reload.time
	reload_time_file /tmp/reload.${_INSTANCE}
    vrrp_garp_master_delay 0
    vrrp_garp_master_repeat 1
}

vrrp_sync_group group15 {
	group {
		vrrp
		vrrp2
	}
}

vrrp_instance vrrp {
	version 2
	state BACKUP
	interface $IF4

	use_vmac vrrp1
#	use_vmac

	track_file {
	}

	garp_master_delay 5

	virtual_router_id 100

@high	priority 200
@low	priority 100
	advert_int 1.0

	virtual_ipaddress {
		192.168.100.38/28
	}

	preempt_delay 0
#	virtual_routes {
#		192.168.212.0/24 via 10.1.0.1 vrf blue
#	}
}

vrrp_instance vrrp2 {
	version 2
	state BACKUP
	interface $IF5

	use_vmac vrrp2
#	use_vmac

	track_file {
	}

	garp_master_delay 5

	virtual_router_id 100

@high	priority 200
@low	priority 100
	advert_int 1.0

	virtual_ipaddress {
		192.168.16.38/28
	}

	preempt_delay 0
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! notify_fifo.sh
!	#!/bin/bash
!	
!	CREATED_FIFO=0
!	FIFO=$1
!	
!	INSTANCE_TYPE=GROUP
!	INSTANCE_NAME=group100
!	
!	[[ -z $FIFO ]] && echo "A FIFO name must be specified" && exit 1
!	
!	echo $(date +"%T.%6N") starting $$ >>/tmp/debug
!	
!	stopping()
!	{
!		PROLOGUE=$(echo "$(date +"%a %b %e %X %Y")": \[$PPID:$$\])
!		echo "$PROLOGUE" STOPPING
!		echo $(date +"%T.%6N") stopping $$ >>/tmp/debug
!	}
!	
!	start_shutdown()
!	{
!		echo $(date +"%T.%6N") start_shutdown $$ >>/tmp/debug
!		iptables-save -t filter | grep -v keepalived | iptables-restore -T filter
!		# When keepalived terminates, it sends a TERM signal to this script before
!		#  sending the fifo notifies. We catch the SIGTERM here, and after a short
!		#  delay send a SIGALRM to the main script process
!		( sleep 0.5
!		  kill -ALRM $$
!		) &
!	}
!	
!	trap "{ stopping; [[ $CREATED_FIFO -eq 1 ]] && rm -f $FIFO; exit 0; }" \
!		HUP INT QUIT USR1 USR2 PIPE ALRM
!	trap start_shutdown TERM
!	
!	if [[ ! -p $FIFO ]]
!	then
!		mkfifo $FIFO
!		if [[ $? -eq 0 ]]; then
!			CREATED_FIFO=1
!		else
!			echo "Unable to create fifo $FIFO"
!			exit 1
!		fi
!	fi
!	
!	# If keepalived terminates, the FIFO will be closed, so
!	# read the FIFO in a loop. It keepalived hasn't opened the
!	# FIFO, the script will be blocked until it has been opened.
!	while [[ 1 ]]
!	do
!		[[ ! -p $FIFO ]] && echo FIFO $FIFO missing && exit 1
!	
!		while read line
!		do
!			PROLOGUE=$(echo "$(date +"%a %b %e %X %Y")": \[$PPID:$$\])
!			set $line
!			type=$1
!			name=${2//\"/}
!			if [ "$type" = "$INSTANCE_TYPE" ] && [ "$name" = "$INSTANCE_NAME" ]
!			then
!				state=$3
!				priority=$4
!				echo $(date +"%T.%6N") state $state $$ >>/tmp/debug
!				if [ "$state" == "MASTER" ] || [ "$state" == "STOP" ]
!				then
!					iptables-save -t filter | grep -v keepalived | iptables-restore -T filter
!				else
!					iptables -A INPUT -p tcp -m multiport --dports 80,443 -m comment --comment "keepalived" -j DROP
!				fi
!			fi
!		done < $FIFO
!	
!		echo "$PROLOGUE" STOPPED
!	done
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! /tmp/reload
!	#!/bin/bash
!	
!	CONF=/home/quentin/keepalived/utils/configs/2015a.conf
!	
!	OLD_VRID=$(grep virtual_router_id $CONF | head -1 | sed -e "s/.* //")
!	
!	[[ $OLD_VRID -eq 100 ]] && NEW_VRID=15 || NEW_VRID=100
!	
!	[[ $# -gt 1 ]] && NEW_VRID=$1
!	
!	sed -i -e "s/\(virtual_router_id \)$OLD_VRID$/\1$NEW_VRID/" $CONF
!	
!	NEXT_TIME=$(date +"%H:%M:%S" --date="now + 2 seconds")
!	
!	if [[ -f /tmp/reload.time ]]; then
!		echo $NEXT_TIME >/tmp/reload.time
!	else
!		echo $NEXT_TIME | tee >/dev/null /tmp/reload.high /tmp/reload.low
!	fi
!	
!	echo "Restarting $OLD_VRID => $NEW_VRID at $NEXT_TIME"
