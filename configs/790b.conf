@high net_namespace high
@low net_namespace low

global_defs {
    vrrp_garp_master_delay 0
    vrrp_garp_master_repeat 1
    vrrp_garp_lower_prio_delay 0
    vrrp_garp_lower_prio_repeat 2
    vrrp_lower_prio_no_advert true
#    vrrp_reload_advert_delay 5123456
#    vrrp_reload_advert_delay 1000
@low	enable_snmp_keepalived
@low	enable_snmp_rfc
@low    enable_traps
    vrrp_iptables keepalived_in keepalived_out
    vrrp_ipsets keepalived
    vrrp_strict
}

bfd_instance test {
@low    neighbor_ip 10.1.0.1
@high   neighbor_ip 10.1.0.3
@samson neighbor_ip 172.21.53.188
@nabal  neighbor_ip 172.21.53.210
}


vrrp_track_file TF1 {
    file /home/quentin/tmp/tf1.ret
    weight 0
    init_file 0 overwrite
}

vrrp_track_file TF0 {
    file /home/quentin/tmp/tf0.ret
    weight 10
    init_file 0 overwrite
}

vrrp_instance VI_0 {
	state MASTER
	interface eth0
	virtual_router_id 1
@high	priority 170
@low	priority 85
	advert_int 3
#	reload_advert_int 6
	version 3
	use_vmac

	virtual_ipaddress {
		141.1.0.254/32
	}
#	unicast_peer {
#@low	192.168.0.1
#@high	192.168.0.2
#	}
	track_file {
		TF0
	}
}

vrrp_instance VI_1 {
	state BACKUP
	interface eth2
	virtual_router_id 2
@high	priority 170
@low	priority 85
	advert_int 3
#	reload_advert_int 7.29
	version 3

	virtual_ipaddress {
		141.1.0.253/32
		52.50.190.21/32
	}
	track_file {
		TF1
	}
}

virtual_server 52.50.190.21 9999 {
   delay_loop 2

  ! per packet routing for UDP
  ops

  ! alternative implementation for older versions of keepalivd
  ! quorum_up "ipvsadm -E -u 52.50.190.21:9999 --ops -s rr"

  ! Weighted Least-Connections
  ! Distributes more requests to servers with fewer active connections relative to their capacities. Capacity is indicated by a user-assigned weight, which is then adjusted upward or downward by dynamic load information. The addition of weighting makes this algorithm ideal when the real server pool contains hardware of varying capacity.

  ! key to making this work:
  ! use IP address in same network segment for the virtual IP.
  ! would be nice to figure out how to make it work when the virtual IP is in a different segment

  ! round robin
  lvs_sched rr
  lb_algo rr
  lb_kind NAT
  protocol UDP
  ha_suspend

real_server 172.31.22.238 9999 {
  ! equal to default weight
  weight 1

!  HTTP_GET {
!    ! health check HTTP URL
!    url {
!      path /
!      status_code 200
!    }
!    connect_timeout 2
!    nb_get_retry 2
!    delay_before_retry 2
!    connect_port 10000
!  }
    MISC_CHECK {
      misc_path "${_PWD}/scripts/vs.sh rs1"
    retry 2
    delay_before_retry 1
    }

}

real_server 172.31.16.167 9999 {
  ! equal to default weight
  weight 1

!  HTTP_GET {
!    ! health check HTTP URL
!    url {
!      path /
!      status_code 200
!    }
!    connect_timeout 2
!    nb_get_retry 2
!    delay_before_retry 2
!    connect_port 10000
!  }
    MISC_CHECK {
      misc_path "${_PWD}/scripts/vs.sh rs2"
    retry 2
    delay_before_retry 1
    }
}
}
