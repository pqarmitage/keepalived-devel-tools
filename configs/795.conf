@low net_namespace low
@high net_namespace high

global_defs {
  
  enable_script_security
! running on AWS instance id: i-00a81f5b8eb83913d
! this should be defined here, but it apparently doesn't work as advertised
lvs_sync_daemon eth0 VI_1
! name of the LVS director
router_id LVS_1

}

vrrp_instance VI_1 {
  interface eth0
  state MASTER
  virtual_router_id 1
  priority 100
  
@low  unicast_src_ip 10.1.0.3
@high unicast_src_ip 10.1.0.1
  unicast_peer {
@high    10.1.0.1
@low     10.1.0.3
  }

  virtual_ipaddress {
    52.50.190.21/32 dev eth0
  }

  ! go to FAULT state if the specified interface goes down
! These need to be on separate lines before keepalive version 1.41
track_interface {
  eth0
}
advert_int 1

notify_master /nix/store/aj891nh62j0psasdjklwasmp9qnvc5ch-failover_master_cloud/bin/failover_master_cloud
}

virtual_server 52.50.190.21 9999 {
   delay_loop 2

  ! per packet routing for UDP
  ops

  ! alternative implementation for older versions of keepalivd
  ! quorum_up "ipvsadm -E -u 52.50.190.21:9999 --ops -s rr"

  ! Weighted Least-Connections
  ! Distributes more requests to servers with fewer active connections relative to their capacities. Capacity is indicated by a user-assigned weight, which is then adjusted upward or downward by dynamic load information. The addition of weighting makes this algorithm ideal when the real server pool contains hardware of varying capacity.

  ! key to making this work:
  ! use IP address in same network segment for the virtual IP.
  ! would be nice to figure out how to make it work when the virtual IP is in a different segment

  ! round robin
  lvs_sched rr
  lb_algo rr
  lb_kind NAT
  protocol UDP

real_server 172.31.22.238 9999 {
  ! equal to default weight
  weight 1

  HTTP_GET {
    ! health check HTTP URL
    url {
      path /
      status_code 200
    }
    connect_timeout 2
    nb_get_retry 2
    delay_before_retry 2
    connect_port 10000
  }
}

real_server 172.31.16.167 9999 {
  ! equal to default weight
  weight 1

  HTTP_GET {
    ! health check HTTP URL
    url {
      path /
      status_code 200
    }
    connect_timeout 2
    nb_get_retry 2
    delay_before_retry 2
    connect_port 10000
  }
}
}
